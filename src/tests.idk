func check(condition:bool) string
    if condition
        return "OK"
    else
        return "FAIL"
    end
end

func testDeclassignInt() string
    a := 1
    return check(a == 1)
end

func testDeclassignFloat() string
    a := 1.0
    return check(a == 1.0)
end

func testDeclassignBool() string
    a := true
    return check(a)
end

func testDeclassignChar() string
    a := 'a'
    return check(a == 'a')
end

func testDeclassignString() string
    a := "a"
    return check(a == "a")
end

print("testDeclassignInt", testDeclassignInt())
print("testDeclassignFloat", testDeclassignFloat())
print("testDeclassignBool", testDeclassignBool())
print("testDeclassignChar", testDeclassignChar())
print("testDeclassignString", testDeclassignString())

func testDeclareInt() string
    a:int = 1
    return check(a == 1)
end

func testDeclareFloat() string
    a:float = 1.0
    return check(a == 1.0)
end

func testDeclareBool() string
    a:bool = true
    return check(a)
end

func testDeclareChar() string
    a:char = 'a'
    return check(a == 'a')
end

func testDeclareString() string
    a:string = "a"
    return check(a == "a")
end

print("testDeclareInt", testDeclareInt())
print("testDeclareFloat", testDeclareFloat())
print("testDeclareBool", testDeclareBool())
print("testDeclareChar", testDeclareChar())
print("testDeclareString", testDeclareString())

func testDeclareAndAssignInt() string
    a:int
    a = 1
    return check(a == 1)
end

func testDeclareAndAssignFloat() string
    a:float
    a = 1.0
    return check(a == 1.0)
end

func testDeclareAndAssignBool() string
    a:bool
    a = true
    return check(a)
end

func testDeclareAndAssignChar() string
    a:char
    a = 'a'
    return check(a == 'a')
end

func testDeclareAndAssignString() string
    a:string
    a = "a"
    return check(a == "a")
end

print("testDeclareAndAssignInt", testDeclareAndAssignInt())
print("testDeclareAndAssignFloat", testDeclareAndAssignFloat())
print("testDeclareAndAssignBool", testDeclareAndAssignBool())
print("testDeclareAndAssignChar", testDeclareAndAssignChar())
print("testDeclareAndAssignString", testDeclareAndAssignString())

func testFor() string
    a:int
    for a < 5
        a = a + 1
    end
    return check(a == 5)
end

func testIfElse() string
    a:int
    if a < 5
        a = 5
    else
        a = 0
    end
    return check(a == 5)
end

print("testFor", testFor())
print("testIfElse", testIfElse())

func testFunctionWithOneParameter()
    func test(a:int)
        return a
    end

    return check(test(1) == 1 and test(1 + 1) == 2)
end

func testFunctionWithTwoParameters()
    func test(a:int, b:int)
        return a + b
    end

    return check(test(1, 1) == 2 and test(1 + 1, 1) == 3)
end

func testFunctionCallAsParameter()
    func test(a:int, b:int)
        return a + b
    end

    return check(test(test(1, 1), test(1, 1)) == 4)
end

func testPassingFunction()
    func test()
        return true
    end

    f:func = test

    return check(f())
end

print("testFunctionWithOneParameter", testFunctionWithOneParameter())
print("testFunctionWithTwoParameters", testFunctionWithTwoParameters())
print("testFunctionCallAsParameter", testFunctionCallAsParameter())
print("testPassingFunction", testPassingFunction())

func testTypeofInt() string
    a:int
    b:=1
    return check(typeof(a) == int and typeof(b) == int and typeof(0) == int)
end

func testTypeofBool() string
    a:bool
    b:=true
    return check(typeof(a) == bool and typeof(b) == bool and typeof(false) == bool)
end

func testTypeofChar() string
    a:char
    b:=' '
    return check(typeof(a) == char and typeof(b) == char and typeof(' ') == char)
end

func testTypeofString() string
    a:string
    b:=""
    return check(typeof(a) == string and typeof(b) == string and typeof("") == string)
end

func testTypeofFunc() string
    a:func
    return check(typeof(a) == func)
end

print("testTypeofInt", testTypeofInt())
print("testTypeofBool", testTypeofBool())
print("testTypeofChar", testTypeofChar())
print("testTypeofString", testTypeofString())
print("testTypeofFunc", testTypeofFunc())

func testComment() string
    a:int
    // a = 1
    return check(a == 0)
end

print("testComment", testComment())

func testModulo() string
    a:int = 3 % 2
    return check(a == 1)
end

print("testModulo", testModulo())

func testCastingFloatToInt() string
    a:float = 1.0 // TODO: allow for missing .0 when initializing a float
    return check(int(a) == 1)
end

func testCastingIntToFloat() string
    a:int = 1
    return check(float(a) == 1.0)
end

print("testCastingToInt", testCastingFloatToInt())
print("testCastingToFloat", testCastingIntToFloat())
